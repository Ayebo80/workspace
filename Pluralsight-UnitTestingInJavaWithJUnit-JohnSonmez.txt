What is JUnit?
+ e.g. Test result of a Method-Call => Assertion: compares Expected to Received Output
+ JUnitTestRunner
+ Each TC is marked with the @Test

JUnit Features
+ Asserts: 
+ Test setup and teardown: Several ways to setup test data & tear down test data
+ Exception testing: Test if excep was or was not thrown
+ Test suites: Managing a large amount of tests
+ Parameterized Testing: Feed a set of data to a test
+ Assumptions: Ignore tests that are not qualified to run a certain systems/OSs
+ Rules: A rule that lets us create a temporary file
+ Theories: ????
+ Integration with popular build systems: Ant, Maven, Gradle

How JUnit Works:
SUT (Subject Under Test): most commonly a JAVA CLASS

What Is Unit Testing?
Take smallest "unit" of code & test it => In JAVA smallest "unit" is a JAVA CLASS
UNIT TEST vs:
+ Integration/System-Test
+ if you are using a DB or Webservice its NOT a UNIT TEST

Getting JUnit
Download the following JARs and put them on your test classpath:
+ junit.jar
+ hamcrest-core.jar

Eclipse => New => Select a Wizard => Java => JUnit => JUnit Test Case or JUnit Test Suite

Project Overview
HitoryItem.java => DTO (Data Transfer Object) Class

Hello JUnit
#####################################################
"ProteinTracker" => New => Java Project => ProteinTrackerTests
src => New => JUnit Test Case => Hello JUnitTest
Add JUnit 4 library to the build path
######################################################
====================================================================================
2) JUnit Basics
########################################################################
ProteinTrackerTests => Build Path => Configure Build Path => Tab "Projects" => Add => "ProteinTracker"
!!! Now we can access the "ProteinTracker" Classes from inside our ProteinTrackerTests Project
Create new Class "TrackingServiceTests.java" & put all Test-Methods here
#######################################################################
First Test: When TrackingService is created: Total set to "0"
Eclipse: import missing packages when I press Ctrl+Shift+O.

Refactor => Convert Local Variable to Field => Initialize in "Field declaration" 

12. Exception Testing
public void setGoal(int value) throws InvalidGoalException {
	if(value < 0)
		throw new InvalidGoalException();
	goal = value;
}

# Create class 'InvalidGoalException'
# Add throws declaration

@Test(expected = InvalidGoalException.class)
public void WhenGoalIsSetToLessThanZeroExceptionIsThrown() throws InvalidGoalException
{
	service.setGoal(-5);
}

# Add throws declaration

15) Using Timeout
# !!! Use when there is a Test which i know takes along time, so that this test does not hold up other tests
@Test(timeout = 200)
public void BadTest()
{
	for(int i =0; i < 10000000; i++)
		service.addProtein(1);
}

16) Assertions (Basic)
+ assertArrayEquals
+ assertEquals
+ assertTrue, assertFalse
+ assertNull, assertNotNull
+ assertSame, assertNotSame
!!! assertSame vs. assertEquals: assertEquals check if Objects are Equal
assertSame checks if Objects are the Same Objects
+ fail: If we want just to fail the test
========================================================================
3) Advanced JUnit
2. Test Suites
New=> Java Class => ProteinTrackerSuite

3. Creating Test Suites
import org.junit.runner.RunWith;
import org.junit.runners.Suite;

@RunWith(Suite.class)
@Suite.SuiteClasses({
	HelloJUnitTest.class,
	TrackingServiceTests.class
	})
public class ProteinTrackerSuite {
}

4. Categories (similar to Test Suites)
5. Using Categories
a) New => Java Interfaces (example) => Name GoodTestsCategory
b) @Category(GoodTestsCategory.class) after @Test in another class
c) New => Java Class => GoodTestsSuite
********************************************************************************************************
* Categories for long runing tests, run as part of the build, but not on my local dev machine  *
********************************************************************************************************

6) Parameterized Tests
7) Creating Parameterized Tests
Create => New => JavaClass => "ParameterizedTests"
8) Advanced Assertions (AssertThat uses hamcrest Java-Library)
AssertThat([value],[matcherstatement])
matcherstatement: Is, HasItem, ContainsString, IsNull, AllOf
Example: ANSTATT AssertEquals(3, result); BESSER AssertThat(result.Is(3));

import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import static org.junit.matchers.JUnitMatchers.*;

Hamcrest CoreMatchers: http://junit-team.github.com/junit/javadoc/latest/org/hamcrest/core/package-summary.html
AllOf, AnyOf, DescribedAs, Is, IsAnything, IsEqual, IsInstanceOf(Integer.class), IsNot, IsNull, IsSame

JUnitMatchers: http://junit-team.github.com/junit/javadoc/latest/org/junit/matchers/JUnitMatchers.html
******************************************************
Of Mehrere Matchers Testen:
assertThat(service.getTotal(), allOf(is(10), instanceOf(Integer.class)));
******************************************************

********************************************
STRG+SPACE = Show All Overloaded Functions
********************************************
10. Advanced Exception Testing
11. Usign Expected Exception

https://stackoverflow.com/questions/23984756/why-is-my-import-of-the-containsstring-method-not-working
import static org.hamcrest.core.StringContains.containsString;
INSTEAD of import static org.junit.matchers.JUnitMatchers.containsString;

12. Rules (let you extend the functionality of JUnit)
+ TemporaryFolder
+ ExternalResource
+ ErrorCollector
+ Verifier
+ TestWatcher
+ TestName
+ Timeout
+ ExpectedException
+ RuleChain

@ClassRule: Rules to work at class level

13. Using Rules
@Rule
	public Timeout timeout = new Timeout(20, TimeUnit.MILLISECONDS); 
ANSTATT	public Timeout timeout = new Timeout(20);

https://github.com/junit-team/junit4/blob/master/doc/ReleaseNotes4.12.md
Timeout deprecated the old constructor Timeout(int millis). A new constructor is available: Timeout(long timeout, TimeUnit unit). It enables you to use different granularities of time units like NANOSECONDS, MICROSECONDS, MILLISECONDS, and SECONDS. Examples:
@Rule public final TestRule globalTimeout = new Timeout(50, TimeUnit.MILLISECONDS);

14. Theories
15. Using Theories (funktioniert nicht richtig => // Compiled from Filter.java (version 1.5 : 49.0, super bit))
New => Java Class => TrackingServiceTheories

===============================================================================================================================
4) Integrating JUnit
1. Introduction
2. Alternatives Runners
3. Console Runner
import org.junit.internal.TextListener;
import org.junit.runner.JUnitCore;

public class ConsoleRunner {

	public static void main(String arg[]) {
		
		JUnitCore junit = new JUnitCore();
		junit.addListener(new TextListener(System.out));
		
		junit.run(TrackingServiceTests.class);
		
	}
}

4. Getting JUnit Jars
https://github.com/junit-team/junit4/wiki/Download-and-Install
http://search.maven.org/#search|gav|1|g:%22junit%22%20AND%20a:%22junit%22
http://search.maven.org/#search|gav|1|g:%22org.hamcrest%22%20AND%20a:%22hamcrest-core%22
=> kopieren nach E:\IT\eclipse\workspace\plugins\*

5. Changing The Project
ProteinTrackerTests/src New=>Package=>Name: com.simpleprogrammer.proteintracker.tests
Move everything from Package "(default package)" to "com.simpleprogrammer.proteintracker.tests"

Select Project "ProteinTracker" & "ProteinTrackerTests" 
and Export=>Java=>JAR file=> E:\IT\eclipse\workspace\ProteinTracker.jar

6. Run From The Command Line
cd E:\IT\eclipse\workspace
java
java -cp E:\IT\eclipse\workspace\plugins\*;E:\IT\eclipse\workspace\ProteinTracker.jar org.junit.runner.JUnitCore com.simpleprogrammer.proteintracker.tests.TrackingServiceTests

7. JUnit And Ant
8. Creating an Ant Build
ProteinTrackerTests -> Export -> General -> AntBuildFiles -> Select 2 Projects
-> Generate 2x build.xml for both Projects "ProteinTracker" & "ProteinTrackerTests"
9. Running With Ant
Select build.xml -> Run As -> External Tools Configurations -> Tab "Targets"
Select Test(suite)s -> Apply
!!! => Now Tests in TrackingServiceTests also runs on Build !!!
10. JUnit Reporting Bug (Not a Bug Anymore after 1.9+)
Select build.xml -> Run As -> External Tools Configurations -> Tab "Targets"
Only Select "junitreport" -> Apply
Report => E:\IT\eclipse\workspace\ProteinTrackerTests\junit\TESTS-TestSuites.xml
11. Creating A Report
Download & Install ant.apache.org
cd E:\IT\apache-ant-1.10.2\bin
ant -buildfile E:\IT\eclipse\workspace\ProteinTrackerTests\build.xml
ant -buildfile E:\IT\eclipse\workspace\ProteinTrackerTests\build.xml junitreport
Report => E:\IT\eclipse\workspace\ProteinTrackerTests\junit\TESTS-TestSuites.xml

12. JUnit And Maven
Maven Fundamentals - Bryan Hansen - Nov 06, 2012

13. Converting To Maven
ProteinTracker -> Configure -> Convert to Maven Project -> Accept Defaults -> Finish
ProteinTrackerTests -> Configure -> Convert to Maven Project -> Accept Defaults -> Finish

ProteinTrackerTestst/pom.xml -> Tab "Dependencies" -> 
Add GroupId+ArtifactId+Version of ProteinTracker: ProteinTracker/ProteinTracker/0.0.1-SNAPSHOT
Add GroupId+ArtifactId+Version of ProteinTracker: junit/junit/LATEST

14. Running Tests in Maven
# Install this Project in Maven Repository
Project "ProteinTracker" -> Run As -> Maven Install

# Maven Install BUILD FAILED:
Window -> Preferences -> Java -> Installed JREs -> Select JDK(JRE)
Window -> Preferences -> Java -> Installed JREs(ExecutionEnvironment) -> Select JDK(JRE)

# Change SRC + TEST directories:
ProteinTrackerTests/pom.xml
  <version>0.0.1-SNAPSHOT</version>
  <build>
    <sourceDirectory>src</sourceDirectory>
    <testSourceDirectory>src</testSourceDirectory>
*********************************************************************************
# By Default the Plugin looks for certain patterns (files that end in Test.java)
# => You can configure Plugin to change certain patterns
*********************************************************************************
Project "ProteinTracker" -> Run As -> Maven test

15. Code Coverage
16. Using EclEmma

17. Cobetura

18. Up Next

=============================================================================================
5) Beyond JUnit
1. Introduction



=======================================================================================